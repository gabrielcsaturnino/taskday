#!/bin/bash

# TaskDay - Setup Completo do Projeto
# Uso: ./scripts/setup.sh [op√ß√£o]
# Op√ß√µes: init, branches, protection, test

# Cores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo -e "${BLUE}üöÄ TaskDay - Setup Completo${NC}"
    echo "============================="
    echo ""
    echo -e "${YELLOW}Uso:${NC}"
    echo "  ./scripts/setup.sh [op√ß√£o]"
    echo ""
    echo -e "${YELLOW}Op√ß√µes:${NC}"
    echo "  init        - Setup inicial completo"
    echo "  branches    - Criar estrutura de branches"
    echo "  protection  - Configurar prote√ß√£o de branches"
    echo "  test        - Testar ambiente"
    echo "  help        - Mostrar esta ajuda"
    echo ""
    echo -e "${YELLOW}Exemplos:${NC}"
    echo "  ./scripts/setup.sh init"
    echo "  ./scripts/setup.sh branches"
    echo "  ./scripts/setup.sh test"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "pom.xml" ]; then
    echo -e "${RED}‚ùå Erro: Execute este script no diret√≥rio raiz do projeto TaskDay${NC}"
    exit 1
fi

# Verificar par√¢metros
if [ $# -eq 0 ] || [ "$1" = "help" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
    exit 0
fi

OPTION=$1

# Fun√ß√£o para setup inicial
setup_init() {
    echo -e "${BLUE}üöÄ Setup Inicial do TaskDay${NC}"
    echo "==============================="
    
    # 1. Verificar depend√™ncias
    echo -e "${YELLOW}üîç Verificando depend√™ncias...${NC}"
    
    if ! command -v git &> /dev/null; then
        echo -e "${RED}‚ùå Git n√£o est√° instalado!${NC}"
        exit 1
    fi
    
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker n√£o est√° instalado!${NC}"
        exit 1
    fi
    
    if ! command -v java &> /dev/null; then
        echo -e "${RED}‚ùå Java n√£o est√° instalado!${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Depend√™ncias verificadas!${NC}"
    
    # 2. Configurar Git
    echo -e "${YELLOW}üîß Configurando Git...${NC}"
    git config --global user.name "Gabriel Saturnino" 2>/dev/null || true
    git config --global user.email "gabrielcsaturnino@gmail.com" 2>/dev/null || true
    echo -e "${GREEN}‚úÖ Git configurado!${NC}"
    
    # 3. Criar branches
    echo -e "${YELLOW}üåø Criando estrutura de branches...${NC}"
    if ! git show-ref --verify --quiet refs/heads/develop; then
        git checkout -b develop
        git push -u origin develop
        echo -e "${GREEN}‚úÖ Branch develop criada!${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Branch develop j√° existe!${NC}"
    fi
    
    # 4. Build da aplica√ß√£o
    echo -e "${YELLOW}üì¶ Fazendo build da aplica√ß√£o...${NC}"
    ./mvnw clean compile
    echo -e "${GREEN}‚úÖ Build conclu√≠do!${NC}"
    
    # 5. Teste do ambiente
    echo -e "${YELLOW}üß™ Testando ambiente...${NC}"
    ./scripts/setup.sh test
    
    echo -e "${GREEN}üéâ Setup inicial conclu√≠do!${NC}"
}

# Fun√ß√£o para criar branches
setup_branches() {
    echo -e "${BLUE}üåø Criando Estrutura de Branches${NC}"
    echo "=================================="
    
    # Verificar se estamos na develop
    current_branch=$(git branch --show-current)
    if [ "$current_branch" != "develop" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Mudando para branch develop...${NC}"
        git checkout develop
    fi
    
    # Criar branches necess√°rias
    branches=("staging" "hotfix" "release" "docs" "chore")
    
    for branch in "${branches[@]}"; do
        if ! git show-ref --verify --quiet refs/heads/$branch; then
            echo -e "${YELLOW}üìù Criando branch: $branch${NC}"
            git checkout -b $branch
            git push -u origin $branch
            echo -e "${GREEN}‚úÖ Branch $branch criada!${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Branch $branch j√° existe!${NC}"
        fi
    done
    
    # Voltar para develop
    git checkout develop
    
    echo -e "${GREEN}üéâ Estrutura de branches criada!${NC}"
    echo ""
    echo -e "${YELLOW}üìã Branches dispon√≠veis:${NC}"
    git branch -a
}

# Fun√ß√£o para configurar prote√ß√£o
setup_protection() {
    echo -e "${BLUE}üîí Configura√ß√£o de Prote√ß√£o de Branches${NC}"
    echo "============================================="
    
    echo -e "${YELLOW}üìã Para configurar prote√ß√£o das branches:${NC}"
    echo "1. V√° para: https://github.com/gabrielcsaturnino/taskday/settings/branches"
    echo "2. Clique em 'Add rule'"
    echo ""
    echo -e "${YELLOW}üîí Para branch MAIN (Produ√ß√£o):${NC}"
    echo "   ‚úÖ Require pull request reviews (2 reviewers)"
    echo "   ‚úÖ Require status checks (code-quality, test, security)"
    echo "   ‚úÖ Require branches to be up to date"
    echo "   ‚úÖ Restrict pushes to matching branches"
    echo ""
    echo -e "${YELLOW}üîí Para branch DEVELOP (Desenvolvimento):${NC}"
    echo "   ‚úÖ Require pull request reviews (1 reviewer)"
    echo "   ‚úÖ Require status checks (code-quality, test)"
    echo "   ‚úÖ Require branches to be up to date"
    echo ""
    echo -e "${GREEN}‚úÖ Instru√ß√µes de prote√ß√£o fornecidas!${NC}"
}

# Fun√ß√£o para testar ambiente
setup_test() {
    echo -e "${BLUE}üß™ Testando Ambiente TaskDay${NC}"
    echo "==============================="
    
    # 1. Teste de compila√ß√£o
    echo -e "${YELLOW}üì¶ Testando compila√ß√£o...${NC}"
    if ./mvnw clean compile -q; then
        echo -e "${GREEN}‚úÖ Compila√ß√£o OK!${NC}"
    else
        echo -e "${RED}‚ùå Erro na compila√ß√£o!${NC}"
        return 1
    fi
    
    # 2. Teste de an√°lise de c√≥digo
    echo -e "${YELLOW}üîç Testando an√°lise de c√≥digo...${NC}"
    if ./mvnw spotbugs:check -q; then
        echo -e "${GREEN}‚úÖ SpotBugs OK!${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  SpotBugs com warnings (normal)${NC}"
    fi
    
    # 3. Teste de testes
    echo -e "${YELLOW}üß™ Testando testes unit√°rios...${NC}"
    if ./mvnw test -q; then
        echo -e "${GREEN}‚úÖ Testes OK!${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Alguns testes falharam (verificar)${NC}"
    fi
    
    # 4. Teste de Docker
    echo -e "${YELLOW}üê≥ Testando Docker...${NC}"
    if docker --version &> /dev/null; then
        echo -e "${GREEN}‚úÖ Docker OK!${NC}"
    else
        echo -e "${RED}‚ùå Docker n√£o est√° funcionando!${NC}"
        return 1
    fi
    
    # 5. Teste de Git
    echo -e "${YELLOW}üåø Testando Git...${NC}"
    if git status &> /dev/null; then
        echo -e "${GREEN}‚úÖ Git OK!${NC}"
    else
        echo -e "${RED}‚ùå Git n√£o est√° funcionando!${NC}"
        return 1
    fi
    
    echo -e "${GREEN}üéâ Todos os testes passaram!${NC}"
    echo ""
    echo -e "${YELLOW}üìã Pr√≥ximos passos:${NC}"
    echo "1. Configure prote√ß√£o de branches"
    echo "2. Teste criando uma feature"
    echo "3. Configure deploy"
    echo ""
    echo -e "${GREEN}‚úÖ Ambiente pronto para desenvolvimento!${NC}"
}

# Executar comando baseado na op√ß√£o
case $OPTION in
    "init")
        setup_init
        ;;
    "branches")
        setup_branches
        ;;
    "protection")
        setup_protection
        ;;
    "test")
        setup_test
        ;;
    *)
        echo -e "${RED}‚ùå Op√ß√£o inv√°lida: $OPTION${NC}"
        show_help
        exit 1
        ;;
esac
